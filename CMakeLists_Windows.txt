cmake_minimum_required(VERSION 3.2)
project( MNISTCpp VERSION 0.0.1 )

include(GNUInstallDirs)

set(Eigen3_DIR ${PROJECT_SOURCE_DIR}/dependencies/Eigen/share/eigen3/cmake)
find_package(Eigen3 REQUIRED)

set(OpenCV_DIR ${PROJECT_SOURCE_DIR}/dependencies/opencv)
find_package(OpenCV REQUIRED)
install(IMPORTED_RUNTIME_ARTIFACTS ${OpenCV_LIBS})
# Avoid changing PATH
install(IMPORTED_RUNTIME_ARTIFACTS ${OpenCV_LIBS} CONFIGURATIONS Debug DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/Debug)
install(IMPORTED_RUNTIME_ARTIFACTS ${OpenCV_LIBS} CONFIGURATIONS Release DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/Release)

set(Torch_DIR ${PROJECT_SOURCE_DIR}/dependencies/libtorch/share/cmake/Torch)
find_package(Torch REQUIRED)
install(IMPORTED_RUNTIME_ARTIFACTS torch;torch_cpu;c10)
# Avoid changing PATH
install(IMPORTED_RUNTIME_ARTIFACTS torch;torch_cpu;c10 CONFIGURATIONS Debug DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/Debug)
install(IMPORTED_RUNTIME_ARTIFACTS torch;torch_cpu;c10 CONFIGURATIONS Release DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/Release)
install(FILES 
    ${PROJECT_SOURCE_DIR}/dependencies/libtorch/lib/asmjit.dll
    ${PROJECT_SOURCE_DIR}/dependencies/libtorch/lib/fbgemm.dll
    ${PROJECT_SOURCE_DIR}/dependencies/libtorch/lib/libiomp5md.dll
    ${PROJECT_SOURCE_DIR}/dependencies/libtorch/lib/uv.dll
    DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR})
# Avoid changing PATH
install(FILES 
    ${PROJECT_SOURCE_DIR}/dependencies/libtorch/lib/asmjit.dll
    ${PROJECT_SOURCE_DIR}/dependencies/libtorch/lib/fbgemm.dll
    ${PROJECT_SOURCE_DIR}/dependencies/libtorch/lib/libiomp5md.dll
    ${PROJECT_SOURCE_DIR}/dependencies/libtorch/lib/uv.dll
    CONFIGURATIONS Debug DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/Debug)
install(FILES 
    ${PROJECT_SOURCE_DIR}/dependencies/libtorch/lib/asmjit.dll
    ${PROJECT_SOURCE_DIR}/dependencies/libtorch/lib/fbgemm.dll
    ${PROJECT_SOURCE_DIR}/dependencies/libtorch/lib/libiomp5md.dll
    ${PROJECT_SOURCE_DIR}/dependencies/libtorch/lib/uv.dll
    CONFIGURATIONS Release DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/Release)

include_directories(${PROJECT_SOURCE_DIR}/include ${PROJECT_SOURCE_DIR}/dependencies ${EIGEN3_INCLUDE_DIRS})

add_library(mnist STATIC
    ${PROJECT_SOURCE_DIR}/src/MNIST/MNIST_Dataset.cpp 
    ${PROJECT_SOURCE_DIR}/src/MNIST/MNIST_Image.cpp)
target_link_libraries(mnist ${OpenCV_LIBS})

add_library(neuralnet STATIC
    ${PROJECT_SOURCE_DIR}/src/NeuralNet/NeuralNet.cpp)

add_executable(mnist_math mnist_math.cpp)
target_link_libraries(mnist_math mnist;neuralnet)
install(TARGETS mnist_math
        RUNTIME 
        DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}
    )

add_executable(mnist_batches mnist_batches.cpp )
target_link_libraries(mnist_batches "${TORCH_LIBRARIES}")
install(TARGETS mnist_batches
        RUNTIME 
        DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}
    )

configure_file("${PROJECT_SOURCE_DIR}/config.ini" "${CMAKE_CURRENT_BINARY_DIR}/config.ini" COPYONLY)
install(FILES config.ini
    DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}
    )
# Avoid changing PATH
install(FILES config.ini
    CONFIGURATIONS Debug DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/Debug
    )
install(FILES config.ini
    CONFIGURATIONS Release DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/Release
    )

message("")
message("PROJECT_NAME: ${PROJECT_NAME}")
message("PROJECT_VERSION: ${PROJECT_VERSION}")
message("PROJECT_SOURCE_DIR: ${PROJECT_SOURCE_DIR}")
message("CMAKE_CURRENT_BINARY_DIR: ${CMAKE_CURRENT_BINARY_DIR}")
message("CMAKE_SOURCE_DIR: ${CMAKE_SOURCE_DIR}")
message("CMAKE_CXX_FLAGS_DEBUG: ${CMAKE_CXX_FLAGS_DEBUG}")
message("CMAKE_CXX_FLAGS_RELEASE: ${CMAKE_CXX_FLAGS_RELEASE}")
message("CMAKE_INSTALL_PREFIX: ${CMAKE_INSTALL_PREFIX}")
message("CMAKE_INSTALL_BINDIR: ${CMAKE_INSTALL_BINDIR}")
message("CMAKE_INSTALL_LIBDIR: ${CMAKE_INSTALL_LIBDIR}")
message("CMAKE_INSTALL_INCLUDEDIR: ${CMAKE_INSTALL_INCLUDEDIR}")
message("CMAKE_PREFIX_PATH: ${CMAKE_PREFIX_PATH}")
message("OpenCV_DIR: ${OpenCV_DIR}")
message("OpenCV_LIBS: ${OpenCV_LIBS}")
message("OpenCV_INCLUDE_DIRS: ${OpenCV_INCLUDE_DIRS}")
message("OpenCV_SHARED: ${OpenCV_SHARED}")
message("EIGEN3_DEFINITIONS: ${EIGEN3_DEFINITIONS}")
message("EIGEN3_INCLUDE_DIRS: ${EIGEN3_INCLUDE_DIRS}")
message("TORCH_CXX_FLAGS: ${TORCH_CXX_FLAGS}")
message("TORCH_LIBRARIES: ${TORCH_LIBRARIES}")
message("TORCH_INCLUDE_DIRS: ${TORCH_INCLUDE_DIRS}")
message("")